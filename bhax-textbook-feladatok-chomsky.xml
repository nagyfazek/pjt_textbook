<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás 
            <mediaobject>
                <imageobject>
                    <imagedata fileref="3.png" scale="45"/>
                </imageobject>
            </mediaobject>                
        </para>
        <para>
         Az unáris számrendszerben az ábrázolás n darab egyforma karakter egymás utáni
         leírásával történik.
        A decimálisból unárisba váltás: egy számból folyamatosan 1-eket vonunk ki mindaddig míg 0 nem lesz, és tároljuk
        a levont egyeseket számát.
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
            Első:                
            <programlisting>
            Szabályok:
            S -> aBSc
            S -> abc
            Ba -> aB
            Bb -> bb
                Levezetés: S -> aBSc -> aBaBabccc -> aaBBabccc -> aaBaBbccc ->  aaaBBbccc -> aaBbbcc -> aaabbbccc
            </programlisting>
            Második:
            <programlisting>
                Szabályok:
S -> abc
S -> aXbc
Xb -> bX
Xc -> Ybcc
bY -> Yb
aY -> aaX
aY -> aa
                Levezetés:
                S -> aXbc -> abXc -> abYbcc -> aYbbcc -> aaXbbcc -> aabXbcc -> aabbXcc -> aabbYbccc -> aabYbbccc  -> aaYbbbccc -> aaabbbccc
            </programlisting>
        </para>
        <para>
            Noam Chomsky alkotta meg a generatív nyelvtan elméletét illetve ő dolgozta ki a Chomsky-hierarchiát. A gramatikának
            három típusa van: a környezet független, a szabályos és a generatív nyelvtan. A környezetfüggetlen nyelvtanban
            a szabályok megadása esetén a bal oldalt nem terminális változó, a jobb oldalt terminális változók állnak.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://gitlab.com/nagyfazek06/programozas/blob/master/hivatkozas.c
        </para>
        <para>
            A Backus-Naur-forma a különböző nyelvek egyik lehetséges leírási módszere. Ezt a leírási módszert John
Backus hozta létre, eredetileg az ALGOL programozási nyelvhez. Azóta már a legtöbb programozási
nyelv szintaxisát BNF-ben adják meg, illetve természetes leírásához is használják alkalmanként. Peter
Naur egyszerűsítette le a leírási módszert, ezért Donald Knuth javaslatára Naur neve is belekerült a leírási
módszer megnevezésébe.
            Feladat volt még olyan C programot írni, amely egyes nyelvi szabvánnyal, jelen esetben a C89-es szab-
vánnyal, nem fordul le, míg például a C99-es szabvánnyal már igen. A C89-es szabvány például még nem
engedte a for ciklusban a ciklusfejben történő ciklusváltozó deklarálását. Ezt szemlélteti a fenti kód is,
ugyanis a -std=c89 kapcsolot használva hibát jelez a fordító.
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  https://gitlab.com/nagyfazek06/programozas/blob/master/realnumber.l
        </para>
        <para>
            Az lex fájl első részében, amit a %{...%} jelöl, jelzem a fordítónak, hogy az stdio.h függvénykönyvtárat
szeretném haszálni az stdoutra való íráshoz, majd létrehozok egy számlálót, ami a lexer által észlelt számok
darabszámát fogja tárolni. A második részben, amit a %%...%% jelöl, megadtam a lexernek, hogy bizonyos
mintákra hogyan reagáljon. A [[:digit:]]+ azt jelenti, hogy legalább egy számjegy egymás után. Ha legalább
egy számjegyet talál egymás után, abban az esetben eggyel növeli a számlálót. Ezután megadtam, hogy
bármilyen más minta eseté ben, effektíve ne csináljon semmit. Majd az utolsó részben, amely már nincs
külön jelölve, a main függvényben meghívjuk a yylex függvényt, amely meghívja magát a lexert, amely
végigfutja bájtonként a bemenetet. Ha a lexer futása véget írt, kiíratom a számláló értékét. Majd a return
0-val jelzi az operációs rendszer felé, hogy a program futása véget ért.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: https://gitlab.com/nagyfazek06/programozas/blob/master/l337d1c7.l 
        </para>
        <para>
            Mi az a leet?
            A leet lényege hogy a kerektereket ASCII karakterekkel helyetesítse. Ennek célja a titkosítás.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  https://gitlab.com/nagyfazek06/programozas/blob/master/jelkezelo.c
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Ebben a feladatban olyan végtelen ciklust készítűnk amiből ctrl+c -vel sem láphetünk ki, ugyanis a SIGNINT jelkezelő megakadályozza.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Az első formula természetes nyelven: Minden x-re létezik olyan y, hogy x kisebb, mint y, és y prím. Tehát:
Minden számnál létezik nagyobb prímszám.
A második formula természetes nyelven: Minden x-re létezik olyan y, hogy x kisebb, mint y, y prím és y
rákövetkezőjének rákövetkezője is prím. Tehát: Minden számnál léteznek nagyobb ikerprímek.
A harmadik formula természetes nyelven: Létezik olyan y, hogy minden x-re igaz, hogy ha x prím, akkor x
kisebb, mint y. Tehát: Minden prímszámra igaz, hogy létezik tőle nagyobb szám.
3.8
Deklaráció
FT
A negyedik formula természetes nyelven: Létezik olyan y, hogy minden x-re igaz, hogy ha y kisebb, mint
x, akkor x nem prím. Tehát: Létezik olyan szám, amelytől nem létezik kisebb prímszám.
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     


</chapter>                
